{"version":3,"file":"static/js/384.undefined.1685951997342.js","mappings":"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","sources":["webpack://knowledge/./src/views/user/staking.vue","webpack://knowledge/./src/views/user/staking.vue?4590"],"sourcesContent":["<template>\n  <div class=\"content\">\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"card \">\n          <div class=\"card-header \">\n            <el-row :gutter=\"10\">\n              <el-col :span=\"12\">\n                <h4 class=\"card-title\">COSD Staking\n                  <small class=\"description\">Please choose purpose</small>\n                </h4>\n              </el-col>\n              <el-col :span=\"8\" style=\"font-size:18px;line-height: 32px;\">current balance:&nbsp;<b>{{ balance.cosd }}</b></el-col>\n              <el-col :span=\"4\" style=\"text-align: right;\">\n                <el-button type=\"primary\" @click=\"open('buy')\" round>Purchase COSD</el-button>\n              </el-col>\n            </el-row>\n          </div>\n          <div class=\"card-body \">\n            <div class=\"alert alert-warning\">\n              <span>Reminder: BSC(Binance smart chain) chain supported only, we'll support various chains soon.</span>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-3\">\n                <ul class=\"nav nav-pills nav-pills-warning nav-pills-icons flex-column\" role=\"tablist\">\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link\" :class=\"active=='sl'?' active show':''\" data-toggle=\"tab\" @click=\"handleClick('sl')\" role=\"tablist\">\n                      <i class=\"fa fa-asterisk\"></i> Staking for <br />starlight league\n                    </a>\n                  </li>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link\" :class=\"active=='club'?' active show':''\" data-toggle=\"tab\" @click=\"handleClick('club')\" role=\"tablist\">\n                      <i class=\"fa fa-group\"></i> Staking for <br />club ownership\n                    </a>\n                  </li>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link\" :class=\"active=='cosd'?' active show':''\" data-toggle=\"tab\" @click=\"handleClick('cosd')\" role=\"tablist\">\n                      <i class=\"fa fa-btc\"></i> Staking for <br />earning COSD\n                    </a>\n                  </li>\n                </ul>\n              </div>\n              <div class=\"col-md-9\">\n                <div class=\"tab-content\">\n                  <!--Starlight league-->\n                  <div class=\"tab-pane\" :class=\"active=='sl'?' active show':''\" id=\"tab-staking-sll\">\n                    <div class=\"card card-stats for-unqualified\">\n                      <div class=\"card-header card-header-warning card-header-icon\">\n                        <div class=\"card-icon\">\n                          <i class=\"fa fa-asterisk\"></i>\n                        </div>\n                        <p class=\"card-category\">Current staking COSD</p>\n                        <h3 class=\"card-title\">{{ balance.sl }}</h3>\n                        <span class=\"badge badge-pill\" :class=\"balance.sl<400?' badge-default':' badge-success'\">Starlight League Unqualified</span>\n                        <button class=\"btn btn-warning btn-round\" v-if=\"balance.sl\" @click=\"open('slunstaking')\">Stop staking</button>\n                      </div>\n                      <div class=\"card-footer\">\n                        <div class=\"stats\">\n                          <i class=\"fa fa-cubes\"></i>&nbsp;Staking pool contract address:&nbsp;&nbsp;\n                          <a href=\"javascript:void(0);\">{{contracts.sl.address}}</a>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"card card-pricing card-raised for-unqualified\">\n                      <div class=\"card-body\">\n                        <div class=\"card-icon icon-rose\">\n                          <i class=\"fa fa-asterisk\"></i>\n                        </div>\n                        <h3 class=\"card-title\" style=\"color: rgb(188, 0, 0);font-weight:bold;\"> 400 COSD = 20 USDT</h3>\n                        <div style=\"font-weight: bold;color:rgb(66, 66, 66);\">\n                          <span style=\"text-decoration:line-through!important;\">1980 COSD = 99 USDT</span>&nbsp;&nbsp;Limited time discount\n                        </div>\n                        <p class=\"card-description\">\n                          You need to stake 400 COSD (equivalent to 20 USDT) to get a qualification for Starlight League.\n                        </p>\n                        <button class=\"btn btn-rose btn-round\" @click=\"open('slstaking')\">Stake</button>\n                      </div>\n                    </div>\n                  </div>\n                  <!--Club ownership-->\n                  <div class=\"tab-pane\" :class=\"active=='club'?' active show':''\" id=\"tab-staking-club\">\n                    <div class=\"card card-stats for-unqualified\">\n                      <div class=\"card-header card-header-warning card-header-icon\">\n                        <div class=\"card-icon\">\n                          <i class=\"fa fa-group\"></i>\n                        </div>\n                        <p class=\"card-category\">Current staking COSD</p>\n                        <h3 class=\"card-title\">{{ balance.club }}</h3>\n                        <span class=\"badge badge-pill\" :class=\"isClubBoss?' badge-success':' badge-default'\">Club ownership Unqualified</span>\n                        <button class=\"btn btn-warning btn-round\" v-if=\"balance.club\" @click=\"open('clubunstaking')\">Stop staking</button>\n                      </div>\n                      <div class=\"card-footer\">\n                        <div class=\"stats\">\n                          <i class=\"fa fa-cubes\"></i>&nbsp;Staking pool contract address:&nbsp;&nbsp;\n                          <a href=\"javascript:void(0);\">{{contracts.club.address}}</a>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"card card-pricing card-raised for-unqualified\">\n                      <div class=\"card-body\">\n                        <div class=\"card-icon icon-rose\">\n                          <i class=\"fa fa-group\"></i>\n                        </div>\n                        <h3 class=\"card-title\" style=\"color: rgb(188, 0, 0);font-weight:bold;\"> 4000 COSD = 200 USDT</h3>\n                        <div style=\"font-weight: bold;color:rgb(66, 66, 66);\">\n                          <span style=\"text-decoration:line-through!important;\">19800 COSD = 990 USDT</span>&nbsp;&nbsp;Limited time discount\n                        </div>\n                        <p class=\"card-description\">\n                          You need to stake 4000 COSD (equivalent to 200 USDT) to get a qualification for a club ownership.\n                        </p>\n                        <a href=\"javascript:void(0);\" class=\"btn btn-rose btn-round\" @click=\"open('clubstaking')\">Stake</a>\n                      </div>\n                    </div>\n                  </div>\n                  <!--COSD Earning-->\n                  <div class=\"tab-pane\" :class=\"active=='cosd'?' active show':''\" id=\"tab-staking-cosd\">\n                    <div class=\"card card-stats\">\n                      <div class=\"card-header card-header-warning card-header-icon\">\n                        <div class=\"card-icon\">\n                          <i class=\"fa fa-btc\"></i>\n                        </div>\n                        <p class=\"card-category\">Current staking COSD</p>\n                        <h3 class=\"card-title\">{{ balance.defi }}</h3>\n                      </div>\n                      <div class=\"card-footer\">\n                        <div class=\"stats\">\n                          <i class=\"fa fa-cubes\"></i>&nbsp;Staking pool contract address:&nbsp;&nbsp;\n                          <a href=\"javascript:void(0);\">{{contracts.defi.address}}</a>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"card card-pricing card-raised for-cosd-unstaked\">\n                      <div class=\"card-body\">\n                        <div class=\"card-icon icon-rose\">\n                          <i class=\"fa fa-btc\"></i>\n                        </div>\n                        <h3 class=\"card-title\"> 2000 COSD = 100 USDT</h3>\n                        <p class=\"card-description\">\n                          You can only stake 2000 COSD (equivalent to 100 USDT).\n                        </p>\n                        <button class=\"btn btn-rose btn-round\" @click=\"open('defistaking')\">Stake</button>\n                        \n                      </div>\n                    </div>\n                    <div class=\"card card-pricing card-raised for-cosd-unstaked\" v-if=\"balance.defi||reward\">\n                      <div class=\"card-body\">\n                        <div class=\"card-icon icon-rose\">\n                          <i class=\"fa fa-line-chart\"></i>\n                        </div>\n                        <h3 class=\"card-title\"> <el-tooltip placement=\"top\" :content=\"reward+''\"><b >{{ Math.round((reward) * 1000) / 1000 }}</b></el-tooltip> COSD will be earned</h3>\n                        <p class=\"card-description\">\n                          Retain 3 decimal places\n                        </p>\n                        <button class=\"btn btn-warning btn-round\" v-if=\"balance.defi\" @click=\"open('defiunstaking')\">Stop staking</button>\n                        <button class=\"btn btn-success btn-round\" v-if=\"reward\" @click=\"claimReward()\">Claim rewards</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <el-dialog v-model=\"visible\" :title=\"action.title\" width=\"400px\" destroy-on-close>\n      <el-row :gutter=\"5\">\n        <el-col :span=\"4\">\n          AMOUNT\n        </el-col>\n        <el-col :span=\"20\">\n          <el-input-number v-model.number=\"action.amount\" controls-position=\"right\" :step=\"1\" :min=\"min.value\" :max=\"100000\" placeholder=\"`set amount\" style=\"width:100%\" @change=\"translate('cosd')\" clearable></el-input-number>\n        </el-col>\n        <el-col :span=\"24\" style=\"margin-top:15px\" v-if=\"needApprove\">\n          <el-button type=\"primary\" @click=\"handleApproveOperate()\" style=\"width:100%\" :disabled=\"disabled\">\n            <el-tag size=\"small\">1</el-tag>&nbsp;Approve Spending\n          </el-button>\n        </el-col>\n        <el-col :span=\"24\" style=\"margin-top:15px\">\n          <el-button type=\"success\" @click=\"handleTransferOperate()\" style=\"width:100%\" :disabled=\"!disabled\">\n            <el-tag size=\"small\" v-if=\"needApprove\">2</el-tag>&nbsp;{{buttonText}}\n          </el-button>\n        </el-col>\n      </el-row>\n    </el-dialog>\n    <el-dialog v-model=\"visible1\" :title=\"action.title\" width=\"400px\" destroy-on-close>\n      <el-alert title=\"TIP: Accumulated expenses of usdt cannot exceed 100,000\" type=\"info\" style=\"margin-bottom:20px\"></el-alert>\n      <el-row :gutter=\"5\" style=\"margin-bottom:20px\">\n        <el-col :span=\"4\">\n          COSD\n        </el-col>\n        <el-col :span=\"20\">\n          <el-input-number v-model.number=\"action.amount1\" controls-position=\"right\" :step=\"1\" :min=\"20\" :max=\"max\" placeholder=\"`set amount\" style=\"width:100%\" @change=\"translate('usdt')\" clearable></el-input-number>\n        </el-col>\n        <el-col :span=\"24\" style=\"text-align: right;\">\n          <el-button type=\"success\" link @click=\"toMax()\">Max</el-button>\n        </el-col>\n      </el-row>\n      <el-row :gutter=\"5\">\n        <el-col :span=\"4\">USDT</el-col>\n        <el-col :span=\"20\">\n          <el-input-number v-model.number=\"action.amount\" controls-position=\"right\" :step=\"1\" :min=\"min.value\" :max=\"max/20\" placeholder=\"`set amount\" style=\"width:100%\" @change=\"translate('cosd')\" clearable></el-input-number>\n        </el-col>\n        <el-col :span=\"24\" style=\"margin-top:15px\" v-if=\"needApprove\">\n          <el-button type=\"primary\" @click=\"handleApproveOperate()\" style=\"width:100%\" :disabled=\"disabled\">\n            <el-tag size=\"small\">1</el-tag>&nbsp;Approve Spending\n          </el-button>\n        </el-col>\n        <el-col :span=\"24\" style=\"margin-top:15px\">\n          <el-button type=\"success\" @click=\"handleTransferOperate()\" style=\"width:100%\" :disabled=\"!disabled\">\n            <el-tag size=\"small\" v-if=\"needApprove\">2</el-tag>&nbsp;{{buttonText}}\n          </el-button>\n        </el-col>\n      </el-row>\n    </el-dialog>\n  </div>\n</template>\n<script setup>\nimport { ref, onMounted } from \"vue\"\nimport { useStore } from \"vuex\"\nimport buyToken from \"@/abi/buytoken.json\";\nimport cosdToken from \"@/abi/cosdtoken.json\";\nimport busdApprove from \"@/abi/busdtoken.json\";\nimport slStaking from \"@/abi/slStaking.json\";\nimport clubStaking from \"@/abi/clubStaking.json\";\nimport defiStaking from \"@/abi/stakingPool.json\";\nimport { chainApi } from \"@/api/request\";\nimport { loadingHelper } from \"@/utils/loading\";\nimport { CONTRACTS, MetaMask, ASSETTYPE, TXTYPE, POOL, savaAfterTranscation } from \"@/utils/meta-mask\";\nimport { ElMessage } from \"element-plus\";\nimport { cosdApi } from \"../../api/request\";\nconst store = useStore();\nconst active = ref(\"sl\");\nconst balance = ref({\n  cosd: 0,\n  sl: 0, club: 0, defi: 0\n});\nconst action = ref({\n  amount1: 20,\n  amount: 1,\n  title: '',\n  command: ''\n});\nconst contracts = ref(CONTRACTS)\nconst abis = ref({ sl: slStaking, club: clubStaking, defi: defiStaking, buy: buyToken, cosd: cosdToken, busd: busdApprove })\nconst titles = ref({ buy: \"Purchase COSD\", \"slstaking\": \"Staking for starlight league\", \"clubstaking\": \"Staking for club ownership\", \"defistaking\": \"Staking for earning COSD\" })\nconst timeEnd = ref({ defi: 30 * 60 * 1000, sl: 60 * 60 * 1000, club: 60 * 60 * 1000 })\nconst visible = ref(false)\nconst visible1 = ref(false)\nconst isClubBoss = ref(false)\nconst needApprove = ref(true);\nconst metaMask = new MetaMask();\nconst disabled = ref(false)\nconst reward = ref(0)\nconst buttonText = ref('Buy')\nconst min = ref(1)\nconst allowPurchace = ref(2000000)\nconst marketBalance = ref(10000000)\nconst max = ref(2000000)\nfunction handleClick(tab) {\n  active.value = tab;\n}\nfunction translate(type) {\n  let rate = 20;\n  if (type == 'cosd') {\n    action.value.amount1 = action.value.amount * rate;\n  } else if (type == 'usdt') {\n    action.value.amount = action.value.amount1 / rate;\n  }\n}\nfunction toMax() {\n  action.value.amount1 = Math.min(marketBalance.value, allowPurchace.value, 2000000)\n  translate('usdt')\n}\nasync function getStakeTime(key) {\n  let data = {\n    poolId: POOL[key]\n  };\n  let ret;\n  await cosdApi.checkTime(data).then((res => {\n    if (res.code == 0) ret = res.data\n    else ElMessage.error(res.msg)\n  }))\n  return ret\n}\nasync function getUnstakeTime(key) {\n  let data = {\n    userId: store.state.user.id,\n    poolId: POOL[key]\n  }\n  let ret;\n  await cosdApi.checkTimeun(data).then((res => {\n    if (res.code == 0) ret = res.data.flag\n    else ElMessage.error(res.msg)\n  }))\n  return ret\n}\nasync function isStakeTimeAvailable(key) {\n  let ret = false;\n  ret = await getStakeTime(key)\n  if (!ret) ElMessage.error(\"Not exceeding the specified time limit!\")\n  return ret\n}\nasync function isUnStakeTimeAvailable(key) {\n  let ret = false;\n  ret = await getUnstakeTime(key)\n  if (!ret) ElMessage.error(\"Not exceeding the specified time limit!\")\n  return ret\n}\nfunction getBalance(key) {\n  let data = {\n    abi: abis.value[key],\n    address: CONTRACTS[key].address,\n    from: store.state.metaMask.account\n  }\n  metaMask.getBalanceByContract(data).then(res => {\n    balance.value[key] = Math.round((res) * 1000) / 1000;\n  });\n}\nfunction getReward() {\n  if (!metaMask.isAvailable()) return;\n  let data = {\n    abi: abis.value['defi'],\n    address: CONTRACTS['defi'].address,\n    from: store.state.metaMask.account\n  }\n  metaMask.getRewardByContract(data).then(res => {\n    reward.value = res\n  });\n}\nasync function getAmountOfCOSDHasBuy() {\n  if (!metaMask.isAvailable()) return;\n  let data = {\n    abi: abis.value['buy'],\n    address: CONTRACTS['buycosd'].address,\n    from: store.state.metaMask.account\n  }\n  await metaMask.getCOSDHasBuyByContract(data).then(res => {\n    allowPurchace.value = 2000000 - Math.round((res) * 1000) / 1000;\n  });\n}\nasync function getMarketBalance() {\n  if (!metaMask.isAvailable()) return;\n  let data = {\n    abi: abis.value['cosd'],\n    address: CONTRACTS['cosd'].address,\n    baddress: CONTRACTS['buycosd'].address,\n    from: store.state.metaMask.account\n  }\n  await metaMask.getMarketBalanceByContract(data).then(res => {\n    marketBalance.value = Math.round((res) * 1000) / 1000;\n  });\n}\nfunction getClubStatus() {\n  if (!metaMask.isAvailable()) return;\n  let data = {\n    abi: abis.value['club'],\n    address: CONTRACTS['club'].address,\n    from: store.state.metaMask.account\n  }\n  metaMask.getClubStatusByContract(data).then(res => {\n    isClubBoss.value = res;\n    if (res) store.commit(\"setRole\", 1)\n    else store.commit(\"setRole\", 2)\n  });\n}\nasync function open(command) {\n  if (!metaMask.isAvailable()) return;\n  action.value = {\n    amount1: 20,\n    amount: 1,\n    title: titles.value[command],\n    command: command\n  }\n  disabled.value = false;\n  min.value = 1;\n  if (command == 'buy') {\n    await getMarketBalance()\n    await getAmountOfCOSDHasBuy()\n    max.value = Math.min(marketBalance.value, allowPurchace.value, 2000000)\n    buttonText.value = \"Buy\"\n    if(max.value <= 0){\n      if(!allowPurchace.value) ElMessage.error(\"The COSD limit is 2,000,000,there is no available quota!\")\n      if(!marketBalance.value) ElMessage.error(\"No COSD available for purchase in the market !\")\n      return;\n    }\n    visible1.value = true\n  }\n  if (command == 'slstaking') {\n    action.value.amount = 400;\n    needApprove.value = true;\n    buttonText.value = \"Stake\";\n    min.value = 400;\n    visible.value = true\n  }\n  if (command == 'clubstaking') {\n    action.value.amount = 4000;\n    needApprove.value = true;\n    buttonText.value = \"Stake\";\n    min.value = 4000;\n    visible.value = true\n  }\n  if (command == 'defistaking') {\n    action.value.amount = 1;\n    needApprove.value = true;\n    buttonText.value = \"Stake\";\n    min.value = 1;\n    visible.value = true\n  }\n  if (command == 'clubunstaking') {\n    action.value.amount = balance.value['club'];\n    needApprove.value = false\n    buttonText.value = \"Unstake\"\n    disabled.value = true;\n    visible.value = true\n  }\n  if (command == 'slunstaking') {\n    action.value.amount = balance.value['sl'];\n    needApprove.value = false\n    buttonText.value = \"Unstake\"\n    disabled.value = true;\n    visible.value = true\n  }\n  if (command == 'defiunstaking') {\n    action.value.amount = balance.value['defi'];\n    needApprove.value = false\n    buttonText.value = \"Unstake\"\n    disabled.value = true;\n    visible.value = true\n  }\n}\nfunction handleApproveOperate() {\n  if (action.value.command == \"buy\") purchaseApprove();\n  if (action.value.command == \"slstaking\") stakingApprove('sl');\n  if (action.value.command == \"clubstaking\") stakingApprove('club');\n  if (action.value.command == \"defistaking\") stakingApprove('defi');\n}\nfunction handleTransferOperate() {\n  if (action.value.command == \"buy\") purchase();\n  if (action.value.command == \"slstaking\") stakingFunc('sl');\n  if (action.value.command == \"clubstaking\") stakingFunc('club');\n  if (action.value.command == \"defistaking\") stakingFunc('defi');\n  if (action.value.command == \"slunstaking\") unStakingFunc('sl');\n  if (action.value.command == \"clubunstaking\") unStakingFunc('club');\n  if (action.value.command == \"defiunstaking\") unStakingFunc('defi');\n}\nfunction isEmpty() {\n  if (!action.value.amount) {\n    ElMessage.error(\"amount is required!\")\n  }\n  return action.value.amount ? false : true;\n}\nfunction validatorAmount(key) {\n  if (isEmpty()) return false;\n  if (action.value.amount > balance.value[key]) {\n    ElMessage.error(\"Cannot exceed the balance value!\")\n    return false\n  } else {\n    return true;\n  }\n}\nfunction purchaseApprove() {\n  if (!metaMask.isAvailable()) return;\n  let data = {\n    from: store.state.metaMask.account,\n    address: CONTRACTS[\"buycosd\"].address,\n    money: action.value.amount,\n    abi: abis.value.buy,\n    approveAddress: CONTRACTS[\"busd\"].address,\n    abiApprove: busdApprove\n  }\n  if (isEmpty()) return;\n  loadingHelper.show()\n  metaMask.approveByContract(data).then(() => {\n    loadingHelper.hide();\n    disabled.value = true;\n  }).catch(err => {\n    loadingHelper.hide();\n  })\n}\nfunction purchase() {\n  if (!metaMask.isAvailable()) return;\n  if (isEmpty()) return;\n  let data = {\n    from: store.state.metaMask.account,\n    address: CONTRACTS[\"buycosd\"].address,\n    money: action.value.amount,\n    abi: abis.value.buy,\n    approveAddress: CONTRACTS[\"busd\"].address,\n    abiApprove: busdApprove\n  }\n  loadingHelper.show()\n  metaMask.transferByContract(data).then((res) => {\n    visible.value = false;\n    loadingHelper.hide();\n    let param = {\n      \"txId\": res.transactionHash,\n      \"transType\": TXTYPE.buy,\n      \"fromUserId\": store.state.user.id,\n      \"fromAssetType\": ASSETTYPE.usdt,\n      \"fromAmount\": action.value.amount,\n      \"toUserId\": store.state.user.id,\n      \"toAssetType\": ASSETTYPE.cosd,\n      \"toAmount\": action.value.amount1,\n      \"nftVo\": {},\n      \"blockNumber\": res.blockNumber\n    }\n    savaAfterTranscation(param)\n    getBalance('cosd');\n  }).catch(err => {\n    loadingHelper.hide();\n  })\n}\nasync function stakingApprove(key) {\n  let isTimeAvailable = await isStakeTimeAvailable(key)\n  if (key != 'sl' && !isTimeAvailable) return;\n  if (!metaMask.isAvailable()) return;\n  let data = { from: store.state.metaMask.account, address: CONTRACTS[key].address, money: action.value.amount, abi: abis.value[key], abiApprove: cosdToken, approveAddress: CONTRACTS[\"cosd\"].address }\n  if (!validatorAmount('cosd')) return;\n  loadingHelper.show()\n  metaMask.approveByContract(data).then(() => {\n    loadingHelper.hide();\n    disabled.value = true;\n  }).catch(err => {\n    loadingHelper.hide();\n  })\n}\nfunction stakingFunc(key) {\n  if (!metaMask.isAvailable()) return;\n  let data = { from: store.state.metaMask.account, address: CONTRACTS[key].address, money: action.value.amount, abi: abis.value[key], abiApprove: cosdToken, approveAddress: CONTRACTS[\"cosd\"].address }\n  loadingHelper.show()\n  metaMask.stakingByContract(data).then((res) => {\n    visible.value = false;\n    loadingHelper.hide()\n    let param = {\n      \"txId\": res.transactionHash,\n      \"transType\": TXTYPE.stake[key],\n      \"fromUserId\": store.state.user.id,\n      \"fromAssetType\": ASSETTYPE.cosd,\n      \"fromAmount\": action.value.amount,\n      \"toUserId\": store.state.user.id,\n      \"toAssetType\": ASSETTYPE.cosd,\n      \"toAmount\": action.value.amount,\n      \"nftVo\": {},\n      \"poolId\": POOL[key],\n      \"blockNumber\": res.blockNumber\n    }\n    savaAfterTranscation(param)\n    getBalance(key);\n    getBalance('cosd');\n    if (key == 'club') getClubStatus()\n    if (key == 'defi') { getReward() }\n  }).catch(err => {\n    loadingHelper.hide();\n  })\n}\nasync function unStakingFunc(key) {\n  let isTimeAvailable = await isUnStakeTimeAvailable(key);\n  if (key !== 'sl' && !isTimeAvailable) return;\n  if (!metaMask.isAvailable()) return;\n  if (!validatorAmount(key)) return;\n  let account = store.state.metaMask.account;\n  let data = { from: account, address: CONTRACTS[key].address, money: action.value.amount, abi: abis.value[key] }\n  loadingHelper.show()\n  metaMask.unStakingByContract(data).then((res) => {\n    visible.value = false;\n    let param = {\n      \"txId\": res.transactionHash,\n      \"transType\": TXTYPE.unstake[key],\n      \"fromUserId\": store.state.user.id,\n      \"fromAssetType\": ASSETTYPE.cosd,\n      \"fromAmount\": 0 - action.value.amount,\n      \"toUserId\": store.state.user.id,\n      \"toAssetType\": ASSETTYPE.cosd,\n      \"toAmount\": 0 - action.value.amount,\n      \"nftVo\": {},\n      \"poolId\": POOL[key],\n      \"blockNumber\": res.blockNumber\n    }\n    savaAfterTranscation(param)\n    if (key == 'defi') { getReward() }\n    loadingHelper.hide();\n    getBalance(key);\n    getBalance('cosd');\n    if (key == 'club') getClubStatus()\n  }).catch(err => {\n    console.log(err)\n    loadingHelper.hide();\n  })\n}\nasync function claimReward() {\n  let isTimeAvailable = await isUnStakeTimeAvailable('defi');\n  if (!isTimeAvailable) return;\n  if (!metaMask.isAvailable()) return;\n  let data = { from: store.state.metaMask.account, address: CONTRACTS['defi'].address, abi: abis.value['defi'] };\n  loadingHelper.show();\n  metaMask.claimRewardByContract(data).then(() => {\n    loadingHelper.hide();\n  }).catch(err => {\n    loadingHelper.hide();\n  })\n}\nonMounted(() => {\n  if (metaMask.isAvailable()) {\n    getBalance('cosd')\n    getBalance('sl')\n    getBalance('club')\n    getBalance('defi')\n    getClubStatus()\n    getReward()\n  }\n})\n</script>","import script from \"./staking.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./staking.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["store","useStore","active","ref","balance","cosd","sl","club","defi","action","amount1","amount","title","command","contracts","CONTRACTS","abis","slStaking","clubStaking","defiStaking","buy","buyToken","cosdToken","busd","busdApprove","titles","visible","visible1","isClubBoss","needApprove","metaMask","MetaMask","disabled","reward","buttonText","min","allowPurchace","marketBalance","max","handleClick","tab","value","translate","type","rate","toMax","Math","async","getStakeTime","key","ret","data","poolId","POOL","cosdApi","then","res","code","ElMessage","msg","getUnstakeTime","userId","state","user","id","flag","isStakeTimeAvailable","isUnStakeTimeAvailable","getBalance","abi","address","from","account","getBalanceByContract","round","getReward","isAvailable","getRewardByContract","getAmountOfCOSDHasBuy","getCOSDHasBuyByContract","getMarketBalance","baddress","getMarketBalanceByContract","getClubStatus","getClubStatusByContract","commit","open","handleApproveOperate","purchaseApprove","stakingApprove","handleTransferOperate","purchase","stakingFunc","unStakingFunc","isEmpty","validatorAmount","money","approveAddress","abiApprove","loadingHelper","approveByContract","catch","err","transferByContract","param","transactionHash","TXTYPE","ASSETTYPE","blockNumber","savaAfterTranscation","isTimeAvailable","stakingByContract","unStakingByContract","console","log","claimReward","claimRewardByContract","onMounted","__exports__"],"sourceRoot":""}